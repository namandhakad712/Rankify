version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_ENABLE_DIAGRAM_DETECTION=true
      - NUXT_PUBLIC_ENABLE_ACCESSIBILITY=true
      - NUXT_PUBLIC_ENABLE_RESPONSIVE_DESIGN=true
      - NUXT_PUBLIC_API_TIMEOUT=30000
      - NUXT_PUBLIC_MAX_RETRIES=3
      - NUXT_PUBLIC_CONFIDENCE_THRESHOLD=0.7
      - NUXT_PUBLIC_BATCH_SIZE=5
      # Add your Gemini API key here or use .env file
      # - NUXT_PUBLIC_GEMINI_API_KEY=your_api_key_here
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Development service (for development environment)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    ports:
      - "3000:3000"
      - "24678:24678" # Vite HMR port
    environment:
      - NODE_ENV=development
      - NUXT_PUBLIC_ENABLE_DIAGRAM_DETECTION=true
      - NUXT_PUBLIC_ENABLE_ACCESSIBILITY=true
      - NUXT_PUBLIC_ENABLE_RESPONSIVE_DESIGN=true
      - NUXT_PUBLIC_ENABLE_DEBUG_MODE=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: npm run dev
    profiles:
      - dev
    networks:
      - app-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production
    networks:
      - app-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - cache
    networks:
      - app-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - app-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - app-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge